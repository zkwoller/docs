(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{594:function(t,e,s){"use strict";s.r(e);var a=s(56),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("上一节我们了解到"),s("code",[t._v("render阶段")]),t._v("的工作可以分为“递”阶段和“归”阶段。其中“递”阶段会执行"),s("code",[t._v("beginWork")]),t._v("，“归”阶段会执行"),s("code",[t._v("completeWork")]),t._v("。这一节我们看看“递”阶段的"),s("code",[t._v("beginWork")]),t._v("方法究竟做了什么。")]),t._v(" "),s("h2",{attrs:{id:"方法概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法概览"}},[t._v("#")]),t._v(" 方法概览")]),t._v(" "),s("p",[t._v("可以从"),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L3075",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码这里"),s("OutboundLink")],1),t._v("看到"),s("code",[t._v("beginWork")]),t._v("的定义。整个方法大概有500行代码。")]),t._v(" "),s("p",[t._v("从上一节我们已经知道，"),s("code",[t._v("beginWork")]),t._v("的工作是传入"),s("code",[t._v("当前Fiber节点")]),t._v("，创建"),s("code",[t._v("子Fiber节点")]),t._v("，我们从传参来看看具体是如何做的。")]),t._v(" "),s("h3",{attrs:{id:"从传参看方法执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从传参看方法执行"}},[t._v("#")]),t._v(" 从传参看方法执行")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略函数体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("其中传参：")]),t._v(" "),s("ul",[s("li",[t._v("current：当前组件对应的"),s("code",[t._v("Fiber节点")]),t._v("在上一次更新时的"),s("code",[t._v("Fiber节点")]),t._v("，即"),s("code",[t._v("workInProgress.alternate")])]),t._v(" "),s("li",[t._v("workInProgress：当前组件对应的"),s("code",[t._v("Fiber节点")])]),t._v(" "),s("li",[t._v("renderLanes：优先级相关，在讲解"),s("code",[t._v("Scheduler")]),t._v("时再讲解")])]),t._v(" "),s("p",[t._v("从"),s("RouterLink",{attrs:{to:"/reactDiff/process/doubleBuffer.html"}},[t._v("双缓存机制一节")]),t._v("我们知道，除"),s("RouterLink",{attrs:{to:"/reactDiff/process/doubleBuffer.html#mount时"}},[s("code",[t._v("rootFiber")])]),t._v("以外， 组件"),s("code",[t._v("mount")]),t._v("时，由于是首次渲染，是不存在当前组件对应的"),s("code",[t._v("Fiber节点")]),t._v("在上一次更新时的"),s("code",[t._v("Fiber节点")]),t._v("，即"),s("code",[t._v("mount")]),t._v("时"),s("code",[t._v("current === null")]),t._v("。")],1),t._v(" "),s("p",[t._v("组件"),s("code",[t._v("update")]),t._v("时，由于之前已经"),s("code",[t._v("mount")]),t._v("过，所以"),s("code",[t._v("current !== null")]),t._v("。")]),t._v(" "),s("p",[t._v("所以我们可以通过"),s("code",[t._v("current === null ?")]),t._v("来区分组件是处于"),s("code",[t._v("mount")]),t._v("还是"),s("code",[t._v("update")]),t._v("。")]),t._v(" "),s("p",[t._v("基于此原因，"),s("code",[t._v("beginWork")]),t._v("的工作可以分为两部分：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("update")]),t._v("时：如果"),s("code",[t._v("current")]),t._v("存在，在满足一定条件时可以复用"),s("code",[t._v("current")]),t._v("节点，这样就能克隆"),s("code",[t._v("current.child")]),t._v("作为"),s("code",[t._v("workInProgress.child")]),t._v("，而不需要新建"),s("code",[t._v("workInProgress.child")]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("mount")]),t._v("时：除"),s("code",[t._v("fiberRootNode")]),t._v("以外，"),s("code",[t._v("current === null")]),t._v("。会根据"),s("code",[t._v("fiber.tag")]),t._v("不同，创建不同类型的"),s("code",[t._v("子Fiber节点")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// update时：如果current存在可能存在优化路径，可以复用current（即上一次更新的Fiber节点）")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复用current")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bailoutOnAlreadyFinishedWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mount时：根据tag不同，创建不同的子Fiber节点")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("IndeterminateComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("LazyComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("FunctionComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ClassComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostRoot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostText")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略其他类型")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"update时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update时"}},[t._v("#")]),t._v(" update时")]),t._v(" "),s("p",[t._v("我们可以看到，满足如下情况时"),s("code",[t._v("didReceiveUpdate === false")]),t._v("（即可以直接复用前一次更新的"),s("code",[t._v("子Fiber")]),t._v("，不需要新建"),s("code",[t._v("子Fiber")]),t._v("）")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("oldProps === newProps && workInProgress.type === current.type")]),t._v("，即"),s("code",[t._v("props")]),t._v("与"),s("code",[t._v("fiber.type")]),t._v("不变")]),t._v(" "),s("li",[s("code",[t._v("!includesSomeLane(renderLanes, updateLanes)")]),t._v("，即当前"),s("code",[t._v("Fiber节点")]),t._v("优先级不够，会在讲解"),s("code",[t._v("Scheduler")]),t._v("时介绍")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" oldProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      oldProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" newProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasLegacyContextChanged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includesSomeLane")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略处理")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bailoutOnAlreadyFinishedWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    didReceiveUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"mount时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mount时"}},[t._v("#")]),t._v(" mount时")]),t._v(" "),s("p",[t._v("当不满足优化路径时，我们就进入第二部分，新建"),s("code",[t._v("子Fiber")]),t._v("。")]),t._v(" "),s("p",[t._v("我们可以看到，根据"),s("code",[t._v("fiber.tag")]),t._v("不同，进入不同类型"),s("code",[t._v("Fiber")]),t._v("的创建逻辑。")]),t._v(" "),s("blockquote",[s("p",[t._v("可以从"),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactWorkTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("看到"),s("code",[t._v("tag")]),t._v("对应的组件类型")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mount时：根据tag不同，创建不同的Fiber节点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("IndeterminateComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("LazyComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("FunctionComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("ClassComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostRoot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostComponent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostText")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...省略其他类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("对于我们常见的组件类型，如（"),s("code",[t._v("FunctionComponent")]),t._v("/"),s("code",[t._v("ClassComponent")]),t._v("/"),s("code",[t._v("HostComponent")]),t._v("），最终会进入"),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L233",target:"_blank",rel:"noopener noreferrer"}},[t._v("reconcileChildren"),s("OutboundLink")],1),t._v("方法。")]),t._v(" "),s("h2",{attrs:{id:"reconcilechildren"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reconcilechildren"}},[t._v("#")]),t._v(" reconcileChildren")]),t._v(" "),s("p",[t._v("从该函数名就能看出这是"),s("code",[t._v("Reconciler")]),t._v("模块的核心部分。那么他究竟做了什么呢？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对于"),s("code",[t._v("mount")]),t._v("的组件，他会创建新的"),s("code",[t._v("子Fiber节点")])])]),t._v(" "),s("li",[s("p",[t._v("对于"),s("code",[t._v("update")]),t._v("的组件，他会将当前组件与该组件在上次更新时对应的"),s("code",[t._v("Fiber节点")]),t._v("比较（也就是俗称的"),s("code",[t._v("Diff")]),t._v("算法），将比较的结果生成新"),s("code",[t._v("Fiber节点")])])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildren")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("workInProgress")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("nextChildren")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("renderLanes")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Lanes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于mount的组件")]),t._v("\n    workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountChildFibers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      nextChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于update的组件")]),t._v("\n    workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildFibers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      nextChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      renderLanes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("从代码可以看出，和"),s("code",[t._v("beginWork")]),t._v("一样，他也是通过"),s("code",[t._v("current === null ?")]),t._v("区分"),s("code",[t._v("mount")]),t._v("与"),s("code",[t._v("update")]),t._v("。")]),t._v(" "),s("p",[t._v("不论走哪个逻辑，最终他会生成新的子"),s("code",[t._v("Fiber节点")]),t._v("并赋值给"),s("code",[t._v("workInProgress.child")]),t._v("，作为本次"),s("code",[t._v("beginWork")]),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L1158",target:"_blank",rel:"noopener noreferrer"}},[t._v("返回值"),s("OutboundLink")],1),t._v("，并作为下次"),s("code",[t._v("performUnitOfWork")]),t._v("执行时"),s("code",[t._v("workInProgress")]),t._v("的"),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1702",target:"_blank",rel:"noopener noreferrer"}},[t._v("传参"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("值得一提的是，"),s("code",[t._v("mountChildFibers")]),t._v("与"),s("code",[t._v("reconcileChildFibers")]),t._v("这两个方法的逻辑基本一致。唯一的区别是："),s("code",[t._v("reconcileChildFibers")]),t._v("会为生成的"),s("code",[t._v("Fiber节点")]),t._v("带上"),s("code",[t._v("effectTag")]),t._v("属性，而"),s("code",[t._v("mountChildFibers")]),t._v("不会。")])]),t._v(" "),s("h2",{attrs:{id:"effecttag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#effecttag"}},[t._v("#")]),t._v(" effectTag")]),t._v(" "),s("p",[t._v("我们知道，"),s("code",[t._v("render阶段")]),t._v("的工作是在内存中进行，当工作结束后会通知"),s("code",[t._v("Renderer")]),t._v("需要执行的"),s("code",[t._v("DOM")]),t._v("操作。要执行"),s("code",[t._v("DOM")]),t._v("操作的具体类型就保存在"),s("code",[t._v("fiber.effectTag")]),t._v("中。")]),t._v(" "),s("blockquote",[s("p",[t._v("你可以从"),s("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),s("OutboundLink")],1),t._v("看到"),s("code",[t._v("effectTag")]),t._v("对应的"),s("code",[t._v("DOM")]),t._v("操作")])]),t._v(" "),s("p",[t._v("比如：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM需要插入到页面中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Placement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00000000000010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM需要更新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                   */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00000000000100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM需要插入到页面中并更新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PlacementAndUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*       */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00000000000110")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM需要删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Deletion "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                 */")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b00000000001000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("通过二进制表示"),s("code",[t._v("effectTag")]),t._v("，可以方便的使用位操作为"),s("code",[t._v("fiber.effectTag")]),t._v("赋值多个"),s("code",[t._v("effect")]),t._v("。")])]),t._v(" "),s("p",[t._v("那么，如果要通知"),s("code",[t._v("Renderer")]),t._v("将"),s("code",[t._v("Fiber节点")]),t._v("对应的"),s("code",[t._v("DOM节点")]),t._v("插入页面中，需要满足两个条件：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("fiber.stateNode")]),t._v("存在，即"),s("code",[t._v("Fiber节点")]),t._v("中保存了对应的"),s("code",[t._v("DOM节点")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("(fiber.effectTag & Placement) !== 0")]),t._v("，即"),s("code",[t._v("Fiber节点")]),t._v("存在"),s("code",[t._v("Placement effectTag")])])])]),t._v(" "),s("p",[t._v("我们知道，"),s("code",[t._v("mount")]),t._v("时，"),s("code",[t._v("fiber.stateNode === null")]),t._v("，且在"),s("code",[t._v("reconcileChildren")]),t._v("中调用的"),s("code",[t._v("mountChildFibers")]),t._v("不会为"),s("code",[t._v("Fiber节点")]),t._v("赋值"),s("code",[t._v("effectTag")]),t._v("。那么首屏渲染如何完成呢？")]),t._v(" "),s("p",[t._v("针对第一个问题，"),s("code",[t._v("fiber.stateNode")]),t._v("会在"),s("code",[t._v("completeWork")]),t._v("中创建，我们会在下一节介绍。")]),t._v(" "),s("p",[t._v("第二个问题的答案十分巧妙：假设"),s("code",[t._v("mountChildFibers")]),t._v("也会赋值"),s("code",[t._v("effectTag")]),t._v("，那么可以预见"),s("code",[t._v("mount")]),t._v("时整棵"),s("code",[t._v("Fiber树")]),t._v("所有节点都会有"),s("code",[t._v("Placement effectTag")]),t._v("。那么"),s("code",[t._v("commit阶段")]),t._v("在执行"),s("code",[t._v("DOM")]),t._v("操作时每个节点都会执行一次插入操作，这样大量的"),s("code",[t._v("DOM")]),t._v("操作是极低效的。")]),t._v(" "),s("p",[t._v("为了解决这个问题，在"),s("code",[t._v("mount")]),t._v("时只有"),s("code",[t._v("rootFiber")]),t._v("会赋值"),s("code",[t._v("Placement effectTag")]),t._v("，在"),s("code",[t._v("commit阶段")]),t._v("只会执行一次插入操作。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("根Fiber节点 Demo")]),t._v(" "),s("p",[t._v("借用上一节的Demo，第一个进入"),s("code",[t._v("beginWork")]),t._v("方法的"),s("code",[t._v("Fiber节点")]),t._v("就是"),s("code",[t._v("rootFiber")]),t._v("，他的"),s("code",[t._v("alternate")]),t._v("指向"),s("code",[t._v("current rootFiber")]),t._v("（即他存在"),s("code",[t._v("current")]),t._v("）。")]),t._v(" "),s("blockquote",[s("p",[t._v("为什么"),s("code",[t._v("rootFiber")]),t._v("节点存在"),s("code",[t._v("current")]),t._v("（即"),s("code",[t._v("rootFiber.alternate")]),t._v("），我们在"),s("RouterLink",{attrs:{to:"/reactDiff/process/doubleBuffer.html"}},[t._v("双缓存机制一节mount时的第二步")]),t._v("已经讲过")],1)]),t._v(" "),s("p",[t._v("由于存在"),s("code",[t._v("current")]),t._v("，"),s("code",[t._v("rootFiber")]),t._v("在"),s("code",[t._v("reconcileChildren")]),t._v("时会走"),s("code",[t._v("reconcileChildFibers")]),t._v("逻辑。")]),t._v(" "),s("p",[t._v("而之后通过"),s("code",[t._v("beginWork")]),t._v("创建的"),s("code",[t._v("Fiber节点")]),t._v("是不存在"),s("code",[t._v("current")]),t._v("的（即 "),s("code",[t._v("fiber.alternate === null")]),t._v("），会走"),s("code",[t._v("mountChildFibers")]),t._v("逻辑")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/reactDiff/me.html"}},[t._v("关注公众号")]),t._v("，后台回复"),s("strong",[t._v("531")]),t._v("获得在线Demo地址")],1)]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("p",[s("code",[t._v("beginWork")]),t._v("流程图")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/beginWork.png"),alt:"beginWork流程图"}})])}),[],!1,null,null,null);e.default=r.exports}}]);