(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{425:function(e,r,t){"use strict";t.r(r);var n=t(56),o=Object(n.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("动态规划往往是最能有效考察算法和设计能力的题目类型，面对这类题目最重要的是抓住问题的阶段，了解每个阶段的状态，从而分析阶段之间的关系转化。")]),e._v(" "),t("p",[e._v("适用于动态规划的问题，需要满足最优子结构和无后效性，动态规划的求解过程，在于找到状态转移方程，进行自底向上的求解。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2019/08/18/3roOnqlBDEP5RZN.jpg",alt:""}})]),e._v(" "),t("p",[e._v("自底向上的求解，可以帮你省略大量的复杂计算，例如上面的斐波拉契数列，使用递归的话时间复杂度会呈指数型增长，而动态规划则让此算法的时间复杂度保持在"),t("code",[e._v("O(n)")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"路径问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路径问题"}},[e._v("#")]),e._v(" 路径问题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[e._v("最小路径和"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/unique-paths/",target:"_blank",rel:"noopener noreferrer"}},[e._v("不同路径"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/unique-paths-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("不同路径 II"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-way-to-form-string",target:"_blank",rel:"noopener noreferrer"}},[e._v("形成字符串的最短路径"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"买卖股票类问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#买卖股票类问题"}},[e._v("#")]),e._v(" 买卖股票类问题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii",target:"_blank",rel:"noopener noreferrer"}},[e._v("买卖股票的最佳时机 III"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber",target:"_blank",rel:"noopener noreferrer"}},[e._v("打家劫舍"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/house-robber-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("打家劫舍 II"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"子序列问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子序列问题"}},[e._v("#")]),e._v(" 子序列问题")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/distinct-subsequences",target:"_blank",rel:"noopener noreferrer"}},[e._v("不同的子序列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-product-subarray",target:"_blank",rel:"noopener noreferrer"}},[e._v("乘积最大子序列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长上升子序列"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindromic-subsequence",target:"_blank",rel:"noopener noreferrer"}},[e._v("最长回文子序列"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=o.exports}}]);